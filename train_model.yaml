name: Train FFN Model
description: Compiles and trains the FFN model using the training dataset and saves the trained model.
inputs:
  - {name: ff_model, type: Model}
  - {name: train_dataset, type: Dataset}
outputs:
  - {name: trained_model, type: Model}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet tensorflow keras || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet tensorflow keras --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import pickle
        import os
        import tensorflow as tf
        from keras.optimizers import Adam

        parser = argparse.ArgumentParser()
        parser.add_argument('--ff_model', type=str, required=True)
        parser.add_argument('--train_dataset', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        args = parser.parse_args()

        # Load model
        with open(args.ff_model, "rb") as f:
            model = pickle.load(f)

        # Load dataset
        train_data = tf.data.experimental.load(args.train_dataset)

        # Compile and train
        model.compile(
            optimizer=Adam(learning_rate=0.03),
            loss="mse",
            jit_compile=False,
            metrics=[]
        )
        model.fit(train_data, epochs=2)

        # Save the trained model
        os.makedirs(os.path.dirname(args.trained_model), exist_ok=True)
        with open(args.trained_model, "wb") as f:
            pickle.dump(model, f)
    args:
      - --ff_model
      - {inputPath: ff_model}
      - --train_dataset
      - {inputPath: train_dataset}
      - --trained_model
      - {outputPath: trained_model}
